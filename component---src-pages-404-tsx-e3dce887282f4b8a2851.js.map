{"version":3,"file":"component---src-pages-404-tsx-e3dce887282f4b8a2851.js","mappings":"gLAEMA,EAAkBC,EAAAA,cAAoB,MAM/BC,EAAmB,SAAH,GAA6C,IAAvCC,EAAM,EAANA,OAAQC,EAAQ,EAARA,SAEvC,OAAOH,EAAAA,cAACD,EAAgBK,SAAQ,CAACC,MAAOH,GACnCC,EAET,EAKaG,EAAe,SAACC,GAEzB,OAAOP,EAAAA,cAACD,EAAgBS,SAAQ,MAC3B,SAACN,GAEE,OADQ,IAAIO,KAAKC,aAAaR,GACrBS,OAAOJ,EAAMF,MAC1B,GAER,C,+CCSA,IATe,SAAH,GAAuC,IAAjCO,EAAQ,EAARA,SAAUT,EAAQ,EAARA,SAClBU,EAfV,SAA8BX,GAC1B,IAAIY,EAA2B,KAC/B,GAAIZ,GAAUO,MAAQA,KAAKM,OAAQ,CAC/B,IACMC,EADS,IAAIP,KAAKM,OAAOb,GAChBe,SAEK,iBAATD,IACPF,EAAYE,EAAKF,UAEzB,CAEA,OAAOA,CACX,CAGgBI,CAAqBN,GACjC,OAAOZ,EAAAA,cAAAA,MAAAA,CAAKmB,UAAS,QAAUP,GAAWC,EAAG,QAAWA,EAAQ,KAC5Db,EAAAA,cAACC,EAAAA,EAAgB,CAACC,OAAQU,EAAUQ,cAAc,MAC7CjB,GAGb,C,4FC7Be,SAASkB,IACpB,OAAOrB,EAAAA,cAACsB,EAAAA,EAAM,KACVtB,EAAAA,cAAAA,KAAAA,KAAI,WAEZ,C","sources":["webpack://bible-api/./src/components/Language.tsx","webpack://bible-api/./src/components/Layout.tsx","webpack://bible-api/./src/pages/404.tsx"],"sourcesContent":["import * as React from 'react';\n\nconst LanguageContext = React.createContext('en');\n\nexport interface ProviderProps {\n    locale: string;\n    children?: React.ReactNode\n}\nexport const LanguageProvider = ({ locale, children }: ProviderProps) => {\n    // @ts-ignore\n    return <LanguageContext.Provider value={locale}>\n        {children}\n    </LanguageContext.Provider>\n}\n\nexport interface FormatNumberProps {\n    value: number;\n}\nexport const FormatNumber = (props: FormatNumberProps) => {\n    // @ts-ignore\n    return <LanguageContext.Consumer>\n        {(locale: string) => {\n            let n = new Intl.NumberFormat(locale);\n            return n.format(props.value);\n        }}\n    </LanguageContext.Consumer>\n}","import * as React from 'react';\nimport { Link } from 'gatsby';\nimport { LanguageProvider } from './Language';\n// import { IntlProvider, FormattedNumber } from 'react-intl';\nimport '../sakura.css';\nimport '../extra.css';\n\ntype Props = {\n    language: string;\n    children?: React.ReactNode\n};\n\nfunction getLanguageDirection(locale: string) {\n    let direction: string | null = null;\n    if (locale && Intl && Intl.Locale) {\n        const l: any = new Intl.Locale(locale);\n        const info = l.textInfo;\n\n        if (typeof info === 'object') {\n            direction = info.direction;\n        }\n    }\n\n    return direction;\n}\n\nconst Layout = ({ language, children }: Props) => {\n    const dir = getLanguageDirection(language);\n    return <div className={`lang-${language}${dir ? ` dir-${dir}` : ''}`}>\n        <LanguageProvider locale={language} defaultLocale=\"en\">\n            {children}\n        </LanguageProvider>\n    </div>\n};\n\nexport default Layout;","\nimport * as React from 'react';\nimport Layout from '../components/Layout';\n\nexport default function _404() {\n    return <Layout>\n        <h1>Missing</h1>\n    </Layout>\n}"],"names":["LanguageContext","React","LanguageProvider","locale","children","Provider","value","FormatNumber","props","Consumer","Intl","NumberFormat","format","language","dir","direction","Locale","info","textInfo","getLanguageDirection","className","defaultLocale","_404","Layout"],"sourceRoot":""}